#! /bin/bash
#

# Basic variables
export LANG=C
INIVAR=@INSTALL_PREFIX@/lib/machinekit/inivar
PIDOF=@PIDOF@

# if not overridden by user, point RTAPI_INI to installed default:
if [ -z "$RTAPI_INI" ]; then
    RTAPI_INI=@INSTALL_SYSCONF_DIR@/machinekit/rtapi.ini
fi
export RTAPI_INI

# if not overridden by user, point MACHINEKIT_INI to installed default:
if [ -z "$MACHINEKIT_INI" ]; then
    MACHINEKIT_INI=@INSTALL_SYSCONF_DIR@/machinekit/machinekit.ini
fi
export MACHINEKIT_INI

# Basic checks
if ! test -r "$RTAPI_INI"; then
    echo "RTAPI configuration file unreadable:  $RTAPI_INI" >&2
    exit 1
fi
if ! test -x "$INIVAR"; then
    echo "Config file tool unusable:  $INIVAR" >&2
    exit 1
fi

# Helper function to get variables from config
getvar() {
    # getvar <variable> [ --flavor ]
    # set variable from rtapi_ini;
    # with --flavor, if $FLAVOR is set, look in the [flavor_$FLAVOR] section
    var=$1
    flav_var=$2

    if test "$flav_var" = "--flavor" -a ! -z "$FLAVOR"; then
	SEC="-sec flavor_$FLAVOR"
    else
	SEC=""
    fi

    eval "$var='$($INIVAR -var $var -ini $RTAPI_INI $SEC 2>/dev/null)'"
}

# Fill in other variable values
#
# Executables
getvar flavor
getvar linuxcnc_module_helper
getvar rtapi_msgd

# Flavor configuration
FLAVOR=$($flavor)
getvar MODULES --flavor
getvar rtapi_app --flavor

# catch this common error early on:
if ! test -u ${rtapi_app}
then
    echo Warning - ${rtapi_app} not setuid >&2
    echo "'sudo make setuid' missing?" >&2
fi

if [ "$HAL_SIZE" == "" ]  ; then
    getvar HAL_SIZE
fi

if [ "$DEBUG" == "" ]  ; then
    getvar DEBUG
fi
DEBUG=$((10#0$DEBUG))  # be sure $DEBUG is some base-10 number

# SHMDRV_OPTS:
# suggested use: SHMDRV_OPTS='debug=3'
# which will log shmdrv operations to the kernel log
if [ "$SHMDRV_OPTS" != "" ]  ; then
    MSGD_OPTS="$MSGD_OPTS --shmdrv_opts=$SHMDRV_OPTS"
fi

# SYSLOG_TO_STDERR:  when set, log to stdout instead of syslog
if test -n "$SYSLOG_TO_STDERR"; then
    MSGD_OPTS+=" -s"
    RTAPI_APP_OPTS+=" -s"
fi

# set the default instance, if not already set
INSTANCE=`printf '%d' $INSTANCE`
if [ "$INSTANCE_NAME" != "" ]  ; then
    NAME_CMD=--instance_name="$INSTANCE_NAME"
else
    unset NAME_CMD
fi


# Compute module lists
#
# reverse list of modules for unloading
MODULES_UNLOAD=
for MOD in $MODULES; do
    MODULES_UNLOAD="$MOD $MODULES_UNLOAD"
done



# wait for a pid to exit
anywait(){
    pid=$1
    for (( n=0; $n<20; $((n++)) )); do
	# return success if process died
	kill -0 "$pid" >/dev/null 2>&1 || return 0
	# otherwise, wait 1/2 second and try again, up to 10 seconds
	sleep 0.5
    done
    return 1
}

CheckStatus(){
    local res=0

    # check if rtapi_msgd and rtapi_app are running
    progs="msgd:${INSTANCE} rtapi:${INSTANCE}"

    for prog in $progs; do
	if test -n "$($PIDOF $prog)"; then
	    echo "$prog running" >&2
	else
	    echo "$prog stopped" >&2
	    res=1
	fi
    done

    return $res
}


Load(){

    # kernel threads must have shmdrv.ko loaded
    # userland threads optionally may use the shmdrv module.
    # The shmdrv module is loaded by rtapi_msgd if needed.

    # rtapi_msgd creates the global segment containing the error ring buffer
    # so start this first:

    ${rtapi_msgd} --instance=$INSTANCE $NAME_CMD \
	--rtmsglevel=$DEBUG \
	--usrmsglevel=$DEBUG \
	--halsize=$HAL_SIZE $MSGD_OPTS || \
	(echo "rtapi_msgd startup failed - aborting"; exit $?)

    # rtapi_app_<flavor> now handles the kernel module loading
    # for kthreads as needed
    if [ $DEBUG -gt 0 ] ; then
	    ${rtapi_app} --instance=$INSTANCE $RTAPI_APP_OPTS  || \
		(echo "rtapi_app startup failed - aborting"; exit $?)
    fi
    # wait until rtapi_app responds, meaning setup is complete
    # this avoids startup races
    halcmd ping
}

RemoveModules(){
    # Remove a list of modules recursively
    # 
    # When RTAPI shuts down uncleanly, not only hal_lib and rtapi may
    # still be loaded, but also comp, motmod, or other modules that
    # depend on those.
    #
    # Check for loaded modules dependent on hal_lib and unload them
    # first.

    for MODULE in $*; do
        # recurse on any dependent modules in /proc/modules
        DEP_MODULES=$(cat /proc/modules | \
            awk '/^'$MODULE' / { mods=$4; gsub(","," ",mods); print mods }')
        test "$DEP_MODULES" = - || RemoveModules $DEP_MODULES

        # remove module if still loaded
        grep -q "^$MODULE " /proc/modules && \
            $linuxcnc_module_helper remove $MODULE

    done
}


Unload(){

    # shutdown rtapi if it exists

    RTAPI_PID=`$PIDOF rtapi:$INSTANCE`
    if [ "$RTAPI_PID" != "" ] ; then
	if [ $DEBUG -gt 0 ] ; then
	    halcmd stop
	    halcmd unload all
	    halcmd shutdown
	else
	    halcmd stop                >/dev/null 2>&1
	    halcmd unload all          >/dev/null 2>&1
	    halcmd shutdown            >/dev/null 2>&1
        fi
    fi

	INSTKEY=`printf 'linuxcnc-%d-' $INSTANCE`
	rm  -f  /dev/shm/${INSTKEY}* >/dev/null 2>&1

    # wait until rtapi_msgd has vanished. This assures
    # that the last user of the global data segment has vanished,
    # making sure an immediate restart of realtime does not find
    # shm segments still hanging around. The only realistic scenario
    # which could trigger this is runtests.

    # msgd should detect an rtapi_app shutdown, so give some time to
    # let that happen. However, after detecting rtapi_app exit, msgd
    # enters a grace period of 2seconds to collect any remaining messages
    # written to the RT log in the global segment ringbuffer.
    # This helps to debug issues during the critical shutdown phase;
    # if msgd exited right away those messages would be lost.

    sleep 2.5

    # and get nasty only if it didnt
    MSGD_PID=`$PIDOF msgd:$INSTANCE`
    if [ "$MSGD_PID" != "" ] ; then
	kill -TERM $MSGD_PID
	# ...and get even nastier if SIGTERM fails.  FIXME this needs
	# to be reviewed; if we get this far, then we might need
	# operator intervention, including debugging
	if ! anywait $MSGD_PID; then
	    echo "ERROR:  msgd:$INSTANCE failed to exit after SIGTERM;" >&2
	    echo "sending SIGKILL" >&2
	    kill -KILL $MSGD_PID
	fi
    fi

    RemoveModules $MODULES_UNLOAD
}

CheckUnloaded(){

    # if msgd:$INSTANCE is still around, this might still be a running instance 
    # after all - this applies to all flavors - msgd is always there, so cop out

    MSGD_PID=`$PIDOF msgd:$INSTANCE`
    if [ "$MSGD_PID" != "" ] ; then
	echo "instance $INSTANCE still running - process msgd:$INSTANCE present (pid $MSGD_PID) !"
	exit 1
    fi

    # if msgd:$INSTANCE isnt running but rtapi:$INSTANCE is, that's bad - msgd
    # should be last to exit
    # this is a noop in kthreads, but clearly an error in uthreads

    RTAPI_PID=`$PIDOF rtapi:$INSTANCE`
    if [ "$RTAPI_PID" != "" ] ; then
	echo "instance $INSTANCE inproperly shutdown!"
	echo "msgd:$INSTANCE gone, but rtapi:$INSTANCE alive (pid $RTAPI_PID)"
	exit 1
    fi

    # regardless if shmdrv is loaded or not, Posix shm segments for this
    # particular instance should not exist and be in use at this point, which 
    # could be the case if a HAL usercomp were still hanging around

    # if any, determine if a process is still using it; complain if so,
    # else remove with a note

    POSIXSHM=`printf '/dev/shm/linuxcnc-%d-*' $INSTANCE`

    for seg in `ls $POSIXSHM 2>/dev/null` ; do
	if pids=`fuser $seg  2>/dev/null` ; then
	    echo instance $INSTANCE: shared memory $seg still in use by pid: $pids !
	else
	    echo instance $INSTANCE: leftover shared memory $seg unused, removing
	    rm -f $seg
	fi
    done

    # TBD: if fuser /dev/shm indicates a process is using shmdrv, then
    # this is likely another instance, so dont try to unload shmdrv
    # because it's going to fail anyway

    # checks to see if all modules were unloaded

    STATUS=
    if [ -n "$STATUS" ] ; then
	exit 1
    fi
}

CMD=$1

case "$CMD" in

  start|load)
	Load || exit $?
	;;
  restart|force-reload)
	Unload
	CheckUnloaded
	Load || exit $?
	;;
  stop|unload)
	Unload || exit $?
	;;
  status)
	CheckStatus || exit $?
	;;
  # for script debugging
  unloadcheck)
	CheckUnloaded
	;;
  *)
	echo "Usage: $0 {start|load|stop|unload|restart|force-reload|status}" >&2
	exit 1
	;;
esac

exit 0
