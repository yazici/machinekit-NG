#!/usr/bin/make -f
# Simple set of debian/rules that uses debhelper.
# Based on an example by Joey Hess.
# extended by Paul Corner, Alex Joni, Chris Radek, Jeff Epler, John Morris 
# and completely hacked by ArcEye (in cronological order)

# Copyright (C) 2006 Jeff Epler
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# When used to produce a debian package, this file is a script "used to
# control compilation and installation of the executable"

# For cross-compiling
include /usr/share/dpkg/architecture.mk
ifneq ($(DEB_BUILD_GNU_TYPE),$(DEB_HOST_GNU_TYPE))
	set DEB_BUILD_OPTIONS=nocheck 
endif
# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# Enable/disable thread flavors; all flavors disabled by default
THREADS_POSIX = --without-posix
THREADS_RT_PREEMPT = --without-rt-preempt
THREADS_XENOMAI = --without-xenomai
#THREADS_XENOMAI_KERNEL = --without-xenomai-kernel
#THREADS_RTAI_KERNEL = --without-rtai-kernel

# Kernel threads need a list of configured header source directories
# for each architecture
#
# Multiples should be space-separated
#
DEB_HOST_ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)

#HEADERS_XENOMAI_KERNEL_i386 = --with-xenomai-kernel-sources=""
#HEADERS_XENOMAI_KERNEL_amd64 = --with-xenomai-kernel-sources=""
#HEADERS_RTAI_KERNEL_amd64 = --with-rtai-kernel-sources=""
#HEADERS_RTAI_KERNEL_i386 = --with-rtai-kernel-sources=""

# Parallel make
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
    NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
    MAKEFLAGS += -j$(NUMJOBS)
endif
# Only set 'CC' if explicitly defined in environment; otherwise 'make'
# chooses CC=cc and CXX=g++ for defaults
ifneq ($(origin CC),default)
    COMPILE_ENV += CC="$(CC)"
endif
ifneq ($(origin CXX),default)
    COMPILE_ENV += CXX="$(CXX)"
endif


debian/control: debian/configure
#	# if debian/configure has not been run, error out
	if ! test -f debian/configure.cmdline; then \
	    @echo "Please run debian/configure" \
	        "to generate the debian/control file."; \
	    false; \
	fi
	@echo rebuilding debian/control

##########################################################################

build: build-arch build-indep
build-arch: build-stamp
build-indep: build-stamp
build-stamp: debian/control
	dh_testdir

# Add here commands to compile the package.
	cd build && cmake ../ -DINSTALL_PREFIX=/usr
	cd build && make -j${nproc} && make setuid

clean: debian/control
	dh_testdir
	dh_testroot
	rm -f build-stamp

#	# Remove package artifacts
	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs
# start the install
	mkdir -p debian/tmp
	(cd build; export DESTDIR=`pwd`/../debian/tmp; $(MAKE) V=1 $@)
	mkdir -p debian/tmp/usr/lib debian/tmp/usr/include

ifneq (,$(wildcard debian/machinekit-*-kernel-*.install))
	mkdir -p debian/tmp/etc/udev/rules.d
	cp src/rtapi/shmdrv/shmdrv.rules \
	    debian/tmp/etc/udev/rules.d/50-shmdrv.rules
endif
	mkdir -p debian/tmp/etc/security/limits.d
	cp src/rtapi/shmdrv/limits.d-machinekit.conf \
	    debian/tmp/etc/security/limits.d/machinekit.conf

	mkdir -p debian/machinekit-hal/usr/bin
	mkdir -p debian/machinekit-hal/usr/lib/python
	mkdir -p debian/machinekit-hal/usr/include/machinekit
	mkdir -p debian/machinekit-hal/usr/share/machinekit/i_components
	mkdir -p debian/machinekit-hal/usr/share/machinekit/components/pru_support/devicetree
	mkdir -p debian/machinekit-hal/usr/share/machinekit/components/pru_support/pru-src
	mkdir -p debian/machinekit-hal/etc	
	
	cp -f -p -R debian/tmp/usr/* debian/machinekit-hal/usr
	rm -f -R debian/machinekit-hal/usr/src

	cp -f -p scripts/latency* debian/machinekit-hal/usr/bin
	cp -f -p scripts/pru_debug debian/machinekit-hal/usr/bin
	cp -f -p -R scripts/hal_demo debian/machinekit-hal/usr/share/machinekit
	
# add etc
	cp -f -p -R debian/tmp/etc/* debian/machinekit-hal/etc

# add the bits needed to build / rebuild components
#	cp -f -p -L -R include/* debian/machinekit-hal/usr/include/
	cp -f -p -R src/hal/i_components/*.icomp debian/machinekit-hal/usr/share/machinekit/i_components
	cp -f -p -R src/hal/components/* debian/machinekit-hal/usr/share/machinekit/components	
	
# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installchangelogs
	#dh_installexamples
	#dh_installman
	#dh_installmime
	dh_link
	dh_strip
	dh_compress -X.pdf -X.txt -X.hal -X.ini -X.clp -X.var -X.nml \
	    -X.tbl -X.xml -Xsample-configs
	dh_fixperms -X/linuxcnc_module_helper -X/rtapi_app_
	dh_python2 --ignore-shebangs --no-guessing-versions
#	dh_makeshlibs
	dh_installdeb

#	cat debian/machinekit-hal/DEBIAN/shlibs debian/shlibs.pre > \
#	    debian/shlibs.local
#	dh_shlibdeps -l debian/machinekit-hal/usr/lib
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install

